# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

            - name: command-action
  uses: github/command@v2.0.2
  with:
    # The GitHub token used to create an authenticated client - Provided for you by default!
    github_token: # default is ${{ github.token }}
    # The status of the GitHub Actions - For use in the post run workflow - Provided for you by default!
    status: # default is ${{ job.status }}
    # The string to look for in comments as an IssueOps trigger/command. Example: ".lint"
    command: 
    # If set, the specified emoji "reaction" is put on the comment to indicate that the trigger was detected. For example, "rocket" or "eyes"
    reaction: # default is eyes
    # The reaction to add to the comment that triggered the Action if its execution was successful
    success_reaction: # default is +1
    # The reaction to add to the comment that triggered the Action if its execution failed
    failure_reaction: # default is -1
    # A comma separated list of comment contexts that are allowed to trigger this IssueOps command. Pull requests and issues are the only currently supported contexts
    allowed_contexts: # default is pull_request
    # The allowed GitHub permissions an actor can have to invoke IssueOps commands - Example: "write,admin"
    permissions: # default is write,admin
    # Whether or not to allow this IssueOps command to be run on draft pull requests
    allow_drafts: # default is false
    # Whether or not to allow this IssueOps command to be run on forked pull requests
    allow_forks: # default is false
    # Whether or not to require passing CI checks before this IssueOps command can be run
    skip_ci: # default is false
    # Whether or not to require reviews before this IssueOps command can be run
    skip_reviews: # default is false
    # The separator to use for parsing parameters in comments in IssueOps commands. Parameters will are saved as outputs and can be used in subsequent steps
    param_separator: # default is |
    # A comma separated list of GitHub usernames or teams that should be allowed to use the IssueOps commands configured in this Action. If unset, then all users meeting the "permissions" requirement will be able to run commands. Example: "monalisa,octocat,my-org/my-team"
    allowlist: # optional, default is false
    # A GitHub personal access token with "read:org" scopes. This is only needed if you are using the "allowlist" option with a GitHub org team. For example: "my-org/my-team"
    allowlist_pat: # optional, default is false
    # If set to "true", skip the process of completing the Action. This is useful if you want to customize the way this Action completes - For example, custom reactions, comments, etc
    skip_completing: # default is false
    # If set to "true", allow forks to bypass the review requirement if the operation is being made on a pull request from a fork. This option is potentially dangerous if you are checking out code in your workflow as a result of invoking this Action. If the code you are checking out has not been reviewed, then you might open yourself up to a TOCTOU vulnerability. You should always ensure that the code you are checking out has been reviewed, and that you checkout an exact commit sha rather than a ref.
    fork_review_bypass: # default is false


    # pip install -r requirements.txt
    # python main.py




    



          
